{"version":3,"sources":["file:///Users/admin/Documents/GitHub/CMGameRepo/assets/Scripts/CardScript.ts"],"names":["_decorator","Component","CardSelectEvent","ccclass","property","CardScript","FlippedUp","CardType","CardID","start","update","deltaTime","setCardType","cardType","console","log","label","node","getComponentInChildren","string","setFlipStatus","flippedUp","init","cardID","onCardSelected","dispatchEvent","disable","getComponent","enabled"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;AAEZC,MAAAA,e,iBAAAA,e;;;;;;;;;OADH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;4BAIjBK,U,WADZF,OAAO,CAAC,YAAD,C,gBAAR,MACaE,UADb,SACgCJ,SADhC,CAC0C;AAAA;AAAA;AAAA,eACtCK,SADsC;AAAA,eAEtCC,QAFsC;AAAA,eAGtCC,MAHsC;AAAA;;AAKtCC,QAAAA,KAAK,GAAG,CACP;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AAEDC,QAAAA,WAAW,CAACC,QAAD,EAAkB;AACzB,eAAKN,QAAL,GAAgBM,QAAhB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkC,KAAKR,QAAvC,EAFyB,CAIzB;;AACA,cAAIS,KAAa,GAAG,KAAKC,IAAL,CAAUC,sBAAV,CAAiC,UAAjC,CAApB;AACAF,UAAAA,KAAK,CAACG,MAAN,GAAe,KAAKZ,QAApB;AAEH;;AAEDa,QAAAA,aAAa,CAACC,SAAD,EAAqB;AAC9B,eAAKf,SAAL,GAAiBe,SAAjB;AACAP,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB,KAAKP,MAAzB,EAAiC,mBAAjC,EAAsD,KAAKF,SAA3D,EAF8B,CAG9B;AACH;;AAEDgB,QAAAA,IAAI,CAACD,SAAD,EAAsBR,QAAtB,EAAyCU,MAAzC,EAAyD;AACzDT,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,eAAKP,MAAL,GAAce,MAAd;AACA,eAAKX,WAAL,CAAiBC,QAAjB;AACA,eAAKO,aAAL,CAAmBC,SAAnB;AACAP,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH,SAlCqC,CAoCtC;;;AACAS,QAAAA,cAAc,GAAE;AACZ;AACA;AACA,eAAKP,IAAL,CAAUQ,aAAV,CAAwB;AAAA;AAAA,kDAAoB,IAApB,CAAxB;AACH;;AAEDC,QAAAA,OAAO,GAAE;AACL;AACA,eAAKT,IAAL,CAAUU,YAAV,CAAuB,WAAvB,EAAoCC,OAApC,GAA8C,KAA9C;AACA,eAAKX,IAAL,CAAUU,YAAV,CAAuB,WAAvB,EAAoCC,OAApC,GAA8C,KAA9C;AACH;;AA/CqC,O","sourcesContent":["import { _decorator, Component, Node , Event , Label} from 'cc';\nconst { ccclass, property } = _decorator;\nimport { CardSelectEvent } from \"./CardSelectEvent\";\n\n@ccclass('CardScript')\nexport class CardScript extends Component {\n    FlippedUp : boolean;\n    CardType : String;\n    CardID : number;\n\n    start() {\n    }\n\n    update(deltaTime: number) {\n        \n    }\n\n    setCardType(cardType: String){\n        this.CardType = cardType;\n        console.log(\"Card type set to: \", this.CardType);\n\n        // For testing\n        let label : Label = this.node.getComponentInChildren(\"cc.Label\") as Label;\n        label.string = this.CardType as string;\n\n    }\n\n    setFlipStatus(flippedUp : boolean){\n        this.FlippedUp = flippedUp;\n        console.log(\"ID: \", this.CardID, \"Card flipped up: \", this.FlippedUp);\n        // Add animation here based on flip status\n    }\n\n    init(flippedUp : boolean, cardType : String, cardID : number){\n        console.log(\"---INIT---\");\n        this.CardID = cardID;\n        this.setCardType(cardType);\n        this.setFlipStatus(flippedUp);\n        console.log(\"---END CARD INIT---\");\n    }\n\n    // For observer-publisher pattern, when card is selected, emit to card controller\n    onCardSelected(){\n        //console.log(\"Selected, attempt to emit event\");\n        //this.node.emit(\"card-selected\", this);\n        this.node.dispatchEvent(new CardSelectEvent(this));\n    }\n\n    disable(){\n        //this.node.active = false;\n        this.node.getComponent(\"cc.Sprite\").enabled = false;\n        this.node.getComponent(\"cc.Button\").enabled = false;\n    }\n\n}\n\n"]}