{"version":3,"sources":["file:///Users/admin/Documents/GitHub/CMGameRepo/assets/Scripts/CardController.ts"],"names":["shuffleArray","array","currentIndex","length","randomIndex","Math","floor","random","_decorator","Component","instantiate","Prefab","CCInteger","ccclass","property","CardController","type","tooltip","ScoreEval","CardSelectedQueue","NumSelectedCards","ScoreCounter","SaveState","score","combo","cards","faceUpIndex","removedCards","onLoad","start","node","getComponent","localStorage","getItem","console","log","JSON","parse","NumCards","Score","ComboStreak","i","childCard","CardPrefab","addChild","cardScript","children","init","setFlipStatus","disable","setupCardMatchListener","shuffledTypes","getCardTypes","widget","target","push","update","deltaTime","testGetChildren","forEach","childNode","name","CardType","FlippedUp","Array","on","event","card","propagationStopped","CardID","getScore","trackScore","shift","every","val","removeItem","setItem","stringify","scoringTypes","from","scoreHashMap","keys","numTypes"],"mappings":"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","sourcesContent":["import { _decorator, Component, instantiate, Node, Prefab, Widget } from 'cc';\nimport { CCInteger } from 'cc'\nimport { CardScript } from './CardScript';\nimport { ScoreEvaluator } from './ScoreEvaluator';\nimport { CardSelectEvent } from './CardSelectEvent';\nimport { ScoreCounter } from './ScoreCounter';\nconst { ccclass, property } = _decorator;\n\n@ccclass('CardController')\nexport class CardController extends Component {\n    @property({type: Prefab, tooltip: \"Drag card prefab here\"})\n    CardPrefab : Prefab;\n\n    @property({type: CCInteger, tooltip: \"Number of cards\"})\n    NumCards : number;\n\n    ScoreEval : ScoreEvaluator;\n\n    // Queue for tracking card selection events  --  for now use array, change to actual queue later\n    // Stores ID of selected cards temporally, remove the first two on match/mismatch\n    CardSelectedQueue : Array<CardScript>;\n\n    // Number of cards currently selected\n    NumSelectedCards : number;\n\n    // Assuming that number of cards is even, there must be NumCards/2 unique pairs\n    // However, can have repeated pairs if run out of card types\n    // For now, use 5 card types \n\n    // Object to keep track of player score\n    ScoreCounter : ScoreCounter;\n\n    SaveState = {\n        score: 0,\n        combo: 0,\n        cards : [] as string[],\n        faceUpIndex: -1,\n        removedCards : [] as number[]\n    };\n\n    protected onLoad(): void {\n        \n    }\n    start() {\n        // Get the evaluator script\n        this.ScoreEval = this.node.getComponent(\"ScoreEvaluator\") as ScoreEvaluator;\n        // Get score tracker\n        this.ScoreCounter = this.node.getComponent(\"ScoreCounter\") as ScoreCounter;\n        // If save state exists and at least one pair is left\n        if((localStorage.getItem(\"saveState\")) ){\n            console.log(\"Fetched save data\");\n            this.SaveState = JSON.parse(localStorage.getItem(\"saveState\") as string);\n            // parse from here\n            this.NumCards = this.SaveState.cards.length;\n            this.ScoreCounter.Score = this.SaveState.score;\n            this.ScoreCounter.ComboStreak = this.SaveState.combo;\n            for(let i = 0; i < this.NumCards; i++){\n                const childCard = instantiate(this.CardPrefab);\n                this.node.addChild(childCard);\n                let cardScript : CardScript = \n                    this.node.children[i].getComponent(\"CardScript\") as CardScript;\n                cardScript.init(false, this.SaveState.cards[i], i);\n                if(this.SaveState.faceUpIndex == i){\n                    cardScript.setFlipStatus(true);\n                }\n                if(this.SaveState.removedCards[i] == 1){\n                    cardScript.disable();\n                }\n                \n            }\n            // Setup listener for card selection events\n            this.setupCardMatchListener();\n            return;\n        }\n\n        // First make sure that numcards is an even number (cant make pairs with odd num)\n        if(this.NumCards % 2 != 0){\n            this.NumCards -= 1;\n        }\n        \n\n        // Get a random subset of card type pairs\n        let shuffledTypes : Array<String> = this.getCardTypes();\n\n        // Instantiate all cards\n        for (let i = 0; i < this.NumCards; i++){\n            const childCard = instantiate(this.CardPrefab);\n            this.node.addChild(childCard);\n            let cardScript : CardScript = \n                    childCard.getComponent(\"CardScript\") as CardScript;\n            \n            cardScript.init(false, shuffledTypes[i], i); \n            // For layout adjustments\n            let widget : Widget = \n                    childCard.getComponent(\"cc.Widget\") as Widget;\n            widget.target = this.node;\n\n            // Save to save state\n            this.SaveState.cards.push(shuffledTypes[i] as string);\n            this.SaveState.removedCards.push(0);\n        }\n\n        \n\n        // Setup listener for card selection events\n        this.setupCardMatchListener();\n\n        \n    }\n\n    update(deltaTime: number) {\n    }\n\n    testGetChildren(){\n        this.node.children.forEach(childNode=> {\n            console.log(childNode.name);\n            let cardScript : CardScript = \n                        childNode.getComponent(\"CardScript\") as CardScript;\n            if(cardScript){\n                console.log(cardScript.CardType, cardScript.FlippedUp);\n            }\n            \n        });\n    }\n\n    setupCardMatchListener(){\n        this.CardSelectedQueue = new Array<CardScript>();\n        this.NumSelectedCards = 0;\n        this.node.on(\"card-selected\", (event : CardSelectEvent) => {\n            let card : CardScript = event.card;\n            // Stop event propagation\n            event.propagationStopped = true;  \n            console.log(\"SELECTED CARD ID: \", card.CardID, \" CARD TYPE: \",card.CardType);\n            // Handle animation logic here\n    \n            // Check if this card is already face up. If it is then early return\n            if(card.FlippedUp){\n                return;\n            }\n            // First add to queue\n            this.CardSelectedQueue.push(card);\n            this.NumSelectedCards++;\n            // If no other cards selected, can flip face up\n            if(this.NumSelectedCards == 1){\n                // Flip face up\n                card.setFlipStatus(true);\n                this.SaveState.faceUpIndex = card.CardID; // this works because the card id IS the index\n            } else if (this.NumSelectedCards > 1){\n                // By this point, two cards are selected\n                this.SaveState.faceUpIndex = -1;\n                card.setFlipStatus(true);\n                let score : number = this.ScoreEval.getScore(\n                    this.CardSelectedQueue[0].CardType,\n                    card.CardType\n                );\n                console.log(\"Score: \", score);\n                \n                // Pass score to score counter\n                this.ScoreCounter.trackScore(score);\n                // For save state\n                this.SaveState.score = this.ScoreCounter.Score;\n                this.SaveState.combo = this.ScoreCounter.ComboStreak;\n                // Save combo to save state\n                if(score <= 0){\n                    // Mismatch\n                    this.SaveState.combo = 0;\n                    // Do delay, then flip both cards face down\n                    this.CardSelectedQueue[0].setFlipStatus(false);\n                    card.setFlipStatus(false);\n                    \n                } else {\n                    // Match\n    \n                    // Do delay, then disable both cards from rendering\n                    this.CardSelectedQueue[0].disable();\n                    card.disable();\n\n                    // Add disabled cards to save state\n                    this.SaveState.removedCards[this.CardSelectedQueue[0].CardID] = 1;\n                    this.SaveState.removedCards[card.CardID] = 1;\n                }\n                // Eject the first two queue entries which are the two selected cards\n                this.NumSelectedCards -= 2;\n                this.CardSelectedQueue.shift();\n                this.CardSelectedQueue.shift();\n    \n            } else {\n                console.log(\"ERROR: Num selected cards: \", this.NumSelectedCards);\n            }\n            console.log(this.SaveState);\n            \n            // if all cards are removed, no need to save state as game is over\n            if(this.SaveState.removedCards.every((val) => val == 1)){\n                localStorage.removeItem(\"saveState\");\n            } else {\n                localStorage.setItem(\"saveState\", JSON.stringify(this.SaveState));\n            }\n        });\n    }\n\n    getCardTypes() : Array<String>{\n        // From the score evaluator, get the list of scoring card types\n        let scoringTypes : Array<String> = Array.from(this.ScoreEval.scoreHashMap.keys());\n        scoringTypes = shuffleArray(scoringTypes);\n        console.log(scoringTypes);\n        let numTypes : number = this.NumCards / 2;\n        let shuffledTypes : Array<String> = new Array<String>();\n        // Get the first numTypes shuffled types from the evaluator, and only use those for this game\n        console.log(shuffledTypes);\n        for(let i = 0; i < numTypes; i++){\n            // Push twice since we need pairs\n            shuffledTypes.push(scoringTypes[i]);\n            shuffledTypes.push(scoringTypes[i]);\n            console.log(shuffledTypes);\n        }\n        //console.log(shuffledTypes);\n        shuffledTypes = shuffleArray(shuffledTypes);\n        return shuffledTypes;\n    }\n}\n\n// Using the Fisher-Yates shuffle to shuffle an array\nfunction shuffleArray<T>(array: T[]): T[] {\n    let currentIndex = array.length, randomIndex;\n  \n    // While there remain elements to shuffle.\n    while (currentIndex !== 0) {\n  \n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }\n"]}