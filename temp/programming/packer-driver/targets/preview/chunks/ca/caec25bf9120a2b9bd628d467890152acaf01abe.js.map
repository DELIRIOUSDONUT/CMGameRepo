{"version":3,"sources":["file:///Users/admin/Documents/GitHub/CMGameRepo/assets/Scripts/CardController.ts"],"names":["shuffleArray","array","currentIndex","length","randomIndex","Math","floor","random","_decorator","Component","instantiate","Layout","Prefab","AudioSource","CCFloat","CCInteger","ScreenSwitchEventRequest","ccclass","property","CardController","type","tooltip","ScoreEval","CardSelectedQueue","NumSelectedCards","ScoreCounter","ColumnReq","childCardHeight","childCardWidth","SpriteHandler","SaveState","score","combo","cards","faceUpIndex","removedCards","columnReq","numCards","turn","matchCount","start","getCardSize","node","getComponent","loadIfAvailable","setupCardMatchListener","NumCards","shuffledTypes","getCardTypes","i","childCard","CardPrefab","childTransform","width","height","addChild","cardScript","init","widget","target","setSprites","push","Array","child","children","setFlipStatus","on","event","card","propagationStopped","console","log","CardID","CardType","FlippedUp","button","interactable","getScore","trackScore","Score","ComboStreak","MismatchAudioSource","playOneShot","clip","prevCard","scheduleOnce","FlipDelay","button1","button2","MatchAudioSource","disable","shift","Turn","MatchCount","every","val","GameOverAudioSource","dispatchEvent","VictoryDelay","localStorage","removeItem","setItem","JSON","stringify","scoringTypes","from","scoreHashMap","keys","numTypes","parentLayout","parentTransform","parentWidth","contentSize","parentHeight","constraint","Constraint","FIXED_COL","numCols","constraintNum","spacingX","numRows","ceil","spacingY","getItem","parse","sendUpdate"],"mappings":"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","sourcesContent":["import { _decorator, Component, instantiate, Layout, Node, Prefab, UITransform, Widget, Button, SpriteFrame, AudioSource, CCFloat} from 'cc';\nimport { CCInteger } from 'cc'\nimport { CardScript } from './CardScript';\nimport { ScoreEvaluator } from './ScoreEvaluator';\nimport { CardSelectEvent } from './CardSelectEvent';\nimport { ScoreCounter } from './ScoreCounter';\nimport { SpriteHandler } from './SpriteHandler';\nimport { ScreenSwitchEventRequest } from './ScreenSwitchRequestEvent';\nconst { ccclass, property } = _decorator;\n\n@ccclass('CardController')\nexport class CardController extends Component {\n    @property({type: Prefab, tooltip: \"Drag card prefab here\"})\n    CardPrefab : Prefab;\n\n    @property({type: CCInteger, tooltip: \"Number of cards\"})\n    NumCards : number;\n\n    @property({type: CCInteger, tooltip: \"Delay time for card flip\"})\n    FlipDelay : number;\n\n    // Properties for audio\n    @property({type : AudioSource, tooltip: \"Audio source when cards match\"})\n    MatchAudioSource : AudioSource;\n    @property({type : AudioSource, tooltip: \"Audio source when cards mismatch\"})\n    MismatchAudioSource : AudioSource;\n    @property({type : AudioSource, tooltip: \"Audio source when game is over\"})\n    GameOverAudioSource : AudioSource;\n\n    // Property for victory screen\n    @property({type : CCFloat, tooltip: \"Delay time for victory jingle and screen\"})\n    VictoryDelay : number;\n\n    // Used to calculate score for cards\n    ScoreEval : ScoreEvaluator;\n    // Queue for tracking card selection events \n    // Stores ID of selected cards temporally, remove the first two on match/mismatch\n    CardSelectedQueue : Array<CardScript>;\n\n    // Number of cards currently selected\n    NumSelectedCards : number;\n\n    // Object to keep track of player score, combo, turns and matches\n    ScoreCounter : ScoreCounter;\n\n    // Number of columns required by Layout\n    ColumnReq : number;\n\n    // Dimensions of cards based on number of cards and requird columns\n    childCardHeight : number;\n    childCardWidth : number;\n\n    // Handles assignment of card sprites\n    SpriteHandler : SpriteHandler;\n\n    // For keeping track of game states across restarts\n    SaveState = {\n        score: 0,\n        combo: 0,\n        cards : [] as string[],\n        faceUpIndex: -1,\n        removedCards : [] as number[],\n        columnReq: 0,\n        numCards : 0,\n        turn: 0,\n        matchCount: 0\n    };\n\n    start() {\n        // Get requirements for card sizes and columns\n        this.getCardSize();\n        // Get the evaluator script\n        this.ScoreEval = this.node.getComponent(\"ScoreEvaluator\") as ScoreEvaluator;\n        // Get score tracker\n        this.ScoreCounter = this.node.getComponent(\"ScoreCounter\") as ScoreCounter;\n        // Sprite handler\n        this.SpriteHandler = this.node.getComponent(\"SpriteHandler\") as SpriteHandler;\n        // If save state exists and at least one pair is left\n        if(this.loadIfAvailable()){\n            // Setup listener for card selection events\n            this.setupCardMatchListener();\n            // No need to set up game\n            return;\n        }\n        \n        // By this point, failed to load save data, so set up game\n        this.SaveState = {\n            score: 0,\n            combo: 0,\n            cards : [] as string[],\n            faceUpIndex: -1,\n            removedCards : [] as number[],\n            columnReq: 0,\n            numCards : 0,\n            turn: 0,\n            matchCount: 0\n        };\n\n        // First make sure that numcards is an even number (cant make pairs with odd num)\n        if(this.NumCards % 2 != 0){\n            this.NumCards -= 1;\n        }\n\n        // Save current number of cards and columns\n        this.SaveState.columnReq = this.ColumnReq;\n        this.SaveState.numCards = this.NumCards;\n        \n        // Get a random subset of card type pairs\n        let shuffledTypes : Array<String> = this.getCardTypes();\n\n        // Instantiate all cards\n        for (let i = 0; i < this.NumCards; i++){\n            const childCard = instantiate(this.CardPrefab);\n\n            // Adjust dimensions of card to fit parent container\n            let childTransform : UITransform = \n                childCard.getComponent(\"cc.UITransform\") as UITransform;\n            childTransform.width = this.childCardWidth;\n            childTransform.height = this.childCardHeight;\n            this.node.addChild(childCard);\n\n            // Initialize the card script\n            let cardScript : CardScript = \n                    childCard.getComponent(\"CardScript\") as CardScript;\n            cardScript.init(false, shuffledTypes[i], i); \n\n            // For layout adjustments\n            let widget : Widget = \n                    childCard.getComponent(\"cc.Widget\") as Widget;\n            widget.target = this.node;\n\n            // Add sprites\n            this.SpriteHandler.setSprites(cardScript);\n            // Save to save state\n            this.SaveState.cards.push(shuffledTypes[i] as string);\n            this.SaveState.removedCards.push(0);\n        }\n\n        // Setup listener for card selection events\n        this.setupCardMatchListener();\n    }\n\n    setupCardMatchListener(){\n        this.CardSelectedQueue = new Array<CardScript>();\n        this.NumSelectedCards = (this.SaveState.faceUpIndex == -1) ? 0 : 1;\n        // In the case that the program was closed while one card was face up\n        if(this.NumSelectedCards == 1){\n            // Search for card with matching index, and add to queue\n            for(let i = 0; i < this.NumCards; i++){\n                if(this.SaveState.faceUpIndex == i){\n                    let child = this.node.children[i].getComponent(\"CardScript\") as CardScript;\n                    this.CardSelectedQueue.push(child);\n                    child.setFlipStatus(true);\n                    break;\n                }\n            }\n            \n        }\n\n        // Listening to card selection events emitted by card scripts\n        this.node.on(\"card-selected\", (event : CardSelectEvent) => {\n            let card : CardScript = event.card;\n            // Stop event propagation\n            event.propagationStopped = true;  \n            console.log(\"SELECTED CARD ID: \", card.CardID, \" CARD TYPE: \",card.CardType);\n            // Check if this card is already face up. If it is then early return\n            if(card.FlippedUp){\n                return;\n            }\n\n            // First add to queue\n            this.CardSelectedQueue.push(card);\n            this.NumSelectedCards++;\n\n            // If no other cards selected, can flip face up\n            if(this.NumSelectedCards == 1){\n                // Flip face up\n                card.setFlipStatus(true);\n                this.SaveState.faceUpIndex = card.CardID; // this works because the card id IS the index\n                // While face up, cannot interact with it\n                let button : Button = card.getComponent(\"cc.Button\") as Button;\n                button.interactable = false;\n            } else if (this.NumSelectedCards > 1){\n                // By this point, two cards are selected\n\n                // Both cards will be either face down or removed, so reset face up index\n                this.SaveState.faceUpIndex = -1;\n                // Flip face up\n                card.setFlipStatus(true);\n                let score : number = this.ScoreEval.getScore(\n                    this.CardSelectedQueue[0].CardType,\n                    card.CardType\n                );\n                console.log(\"Score: \", score);\n                \n                // Pass score to score counter\n                this.ScoreCounter.trackScore(score);\n                // For save state\n                this.SaveState.score = this.ScoreCounter.Score;\n                this.SaveState.combo = this.ScoreCounter.ComboStreak;\n                // Save combo to save state\n                if(score <= 0){\n                    // --------- MISMATCH -------------\n                    // Play mismatch audio source\n                    this.MismatchAudioSource.playOneShot(this.MismatchAudioSource.clip);\n                    // Flip both cards face down after a delay\n                    let prevCard = this.CardSelectedQueue[0];\n                    this.scheduleOnce(() => {\n                        prevCard.setFlipStatus(false);\n                        card.setFlipStatus(false);\n                    }, this.FlipDelay);\n\n                    // Enable both buttons\n                    let button1 : Button = this.CardSelectedQueue[0].getComponent(\"cc.Button\") as Button;\n                    button1.interactable = true;\n                    let button2 : Button = card.getComponent(\"cc.Button\") as Button;\n                    button2.interactable = true;\n                    // Save state for combo\n                    this.SaveState.combo = 0;\n\n                } else {\n                    // --------- MATCH -------------\n                    // Play audio source\n                    this.MatchAudioSource.playOneShot(this.MatchAudioSource.clip);\n                    // Disable both cards from rendering after a delay\n                    let prevCard = this.CardSelectedQueue[0];\n                    this.scheduleOnce(()=>{\n                        prevCard.disable();\n                        card.disable();\n                        this.SaveState.turn += 1;\n                    }, this.FlipDelay);\n\n                    // Add disabled cards to save state\n                    this.SaveState.removedCards[this.CardSelectedQueue[0].CardID] = 1;\n                    this.SaveState.removedCards[card.CardID] = 1;\n                }\n                // Eject the first two queue entries (the two selected cards)\n                this.NumSelectedCards -= 2;\n                this.CardSelectedQueue.shift();\n                this.CardSelectedQueue.shift();\n\n                // Save states for turn and match count\n                this.SaveState.turn = this.ScoreCounter.Turn;\n                this.SaveState.matchCount = this.ScoreCounter.MatchCount;\n            } else {\n                console.log(\"ERROR: Num selected cards: \", this.NumSelectedCards);\n            }\n            \n            // if all cards are removed, no need to save state as game is over\n            if(this.SaveState.removedCards.every((val) => val == 1)){\n                // Play game over audio source\n                this.scheduleOnce(() => {\n                    this.GameOverAudioSource.playOneShot(this.GameOverAudioSource.clip);\n                    this.node.dispatchEvent(new ScreenSwitchEventRequest(\"victory\"));\n                }, this.VictoryDelay);\n                localStorage.removeItem(\"saveState\");\n            } else {\n                localStorage.setItem(\"saveState\", JSON.stringify(this.SaveState));\n            }\n        });\n    }\n\n    getCardTypes() : Array<String>{\n        // From the score evaluator, get the list of scoring card types\n        let scoringTypes : Array<String> = Array.from(this.ScoreEval.scoreHashMap.keys());\n        scoringTypes = shuffleArray(scoringTypes);\n        console.log(scoringTypes);\n        let numTypes : number = this.NumCards / 2;  // Since we need pairs\n        let shuffledTypes : Array<String> = new Array<String>();\n        // Get the first numTypes shuffled types from the evaluator, and only use those for this game\n        console.log(shuffledTypes);\n        for(let i = 0; i < numTypes; i++){\n            // Push twice since we need pairs\n            shuffledTypes.push(scoringTypes[i]);\n            shuffledTypes.push(scoringTypes[i]);\n            console.log(shuffledTypes);\n        }\n        //console.log(shuffledTypes);\n        shuffledTypes = shuffleArray(shuffledTypes);\n        return shuffledTypes;\n    }\n\n    getCardSize(){\n        // For NumCards, adjust the size of the cell such that they fit perfectly in the container\n        // Need to reference the column constraint \n        let parentLayout : Layout = this.node.getComponent(\"cc.Layout\") as Layout;\n        let parentTransform : UITransform = this.node.getComponent(\"cc.UITransform\") as UITransform;\n        let parentWidth : number = parentTransform.contentSize.width;\n        let parentHeight : number = parentTransform.contentSize.height;\n        if(parentLayout.constraint == Layout.Constraint.FIXED_COL){\n            let numCols : number = parentLayout.constraintNum;\n            this.ColumnReq = numCols;\n            if(this.NumCards >= numCols){\n                // Have to be the full size\n                // Adjust width to fit\n                console.log(\"Parent width \", parentWidth, \", parent height \", parentHeight);\n                this.childCardWidth = (parentWidth - ((numCols - 1) * parentLayout.spacingX)) / numCols;\n                // Adjust height to fit\n                let numRows : number = Math.ceil(this.NumCards / numCols);\n                console.log(\"Num rows is \", numRows);\n                this.childCardHeight = (parentHeight - ((numRows - 1) * parentLayout.spacingY)) / numRows;\n            }\n        }\n\n    }\n\n    // If there is save data then load it\n    loadIfAvailable(){\n        if((localStorage.getItem(\"saveState\")) ){\n            this.SaveState = JSON.parse(localStorage.getItem(\"saveState\") as string);\n\n            // Checks if column requirement or number of cards in this game matches save state\n            // If not then set up new game\n            if(this.SaveState.columnReq != this.ColumnReq){\n                console.log(\"Column req not met\", this.SaveState.columnReq, this.ColumnReq);\n                return false;\n            } else if(this.SaveState.cards.length != this.NumCards){\n                console.log(\"Num cards not met\", this.SaveState.cards.length, this.NumCards);\n                return false;\n            } else {\n                console.log(\"Parse success\");\n                console.log(this.SaveState.cards);\n                // Parse from here\n                this.NumCards = this.SaveState.cards.length;\n                this.ScoreCounter.Score = this.SaveState.score;\n                this.ScoreCounter.ComboStreak = this.SaveState.combo;\n                this.ScoreCounter.Turn = this.SaveState.turn;\n                this.ScoreCounter.MatchCount = this.SaveState.matchCount;\n                this.ScoreCounter.sendUpdate();\n                for(let i = 0; i < this.SaveState.numCards; i++){\n                    const childCard = instantiate(this.CardPrefab);\n                    let childTransform : UITransform = \n                        childCard.getComponent(\"cc.UITransform\") as UITransform;\n                    childTransform.width = this.childCardWidth;\n                    childTransform.height = this.childCardHeight;\n                    this.node.addChild(childCard);\n                    let cardScript : CardScript = \n                        this.node.children[i].getComponent(\"CardScript\") as CardScript;\n                    cardScript.init(false, this.SaveState.cards[i], i);\n                    // Add sprites\n                    this.SpriteHandler.setSprites(cardScript);\n                    if(this.SaveState.faceUpIndex == i){\n                        cardScript.setFlipStatus(true);\n                    }\n                    if(this.SaveState.removedCards[i] == 1){\n                        cardScript.disable();\n                    }\n                 }\n                return true;\n            }\n        } else {\n            return false;\n        }\n    }\n}\n\n// Using the Fisher-Yates shuffle to shuffle an array\nfunction shuffleArray<T>(array: T[]): T[] {\n    let currentIndex = array.length, randomIndex;\n  \n    // While there remain elements to shuffle.\n    while (currentIndex !== 0) {\n  \n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }\n"]}