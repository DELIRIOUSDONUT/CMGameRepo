{"version":3,"sources":["file:///Users/admin/Documents/GitHub/CMGameRepo/assets/Scripts/ScoreEvaluator.ts"],"names":["_decorator","Component","CCInteger","ccclass","property","ScoreEvaluator","type","tooltip","scoreHashMap","onLoad","Map","rankArray","Array","suitArray","index","i","length","j","set","defaultScore","getScore","id_a","id_b","val","get","undefined"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAkBC,MAAAA,S,OAAAA,S;;;;;;;;;OACjC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;gCAGjBK,c,WADZF,OAAO,CAAC,gBAAD,C,UAKHC,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAEJ,SAAP;AAAkBK,QAAAA,OAAO,EAAE;AAA3B,OAAD,C,2BALb,MACaF,cADb,SACoCJ,SADpC,CAC8C;AAAA;AAAA;AAAA,eAE1CO,YAF0C;;AAAA;AAAA;;AAMhCC,QAAAA,MAAM,GAAS;AACrB,eAAKD,YAAL,GAAoB,IAAIE,GAAJ,EAApB,CADqB,CAGrB;;AACA,cAAIC,SAAyB,GAAG,IAAIC,KAAJ,EAAhC;AACAD,UAAAA,SAAS,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,CAAZ;AAEA,cAAIE,SAAyB,GAAG,IAAID,KAAJ,EAAhC;AACAC,UAAAA,SAAS,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAZ;AAEA,cAAIC,KAAc,GAAG,CAArB;;AACA,eAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,SAAS,CAACK,MAA7B,EAAqCD,CAAC,EAAtC,EAAyC;AACrC,iBAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,SAAS,CAACG,MAA7B,EAAqCC,CAAC,EAAtC,EAAyC;AACrC,mBAAKT,YAAL,CAAkBU,GAAlB,CAAsBP,SAAS,CAACI,CAAD,CAAT,GAAeF,SAAS,CAACI,CAAD,CAA9C,EAAmD,KAAKE,YAAxD,EADqC,CACkC;;AACvEL,cAAAA,KAAK;AACR;AACJ;AACJ;;AAEDM,QAAAA,QAAQ,CAACC,IAAD,EAAgBC,IAAhB,EAA8B;AAClC,cAAGD,IAAI,KAAKC,IAAZ,EAAiB;AACb,gBAAIC,GAAG,GAAG,KAAKf,YAAL,CAAkBgB,GAAlB,CAAsBH,IAAtB,CAAV;;AACA,gBAAGE,GAAG,KAAKE,SAAX,EAAqB;AACjB,qBAAO,CAAP;AACH;;AACD,mBAAOF,GAAP;AACH;;AACD,iBAAO,CAAP,CARkC,CAQxB;AACb;;AAlCyC,O;;;;;iBAKlB,E","sourcesContent":["import { _decorator, Component, Node , CCInteger} from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ScoreEvaluator')\nexport class ScoreEvaluator extends Component {\n    \n    scoreHashMap : Map<String, number>;\n\n    @property({type: CCInteger, tooltip: \"Default score for each card type\"})\n    defaultScore : number = 10;\n    protected onLoad(): void {\n        this.scoreHashMap = new Map<String, number>;\n\n        // These are based on the assumption that we're using playing cards -- adjust later for different types\n        let rankArray : Array<string> = new Array<string>;\n        rankArray = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"T\", \"J\", \"Q\", \"K\", \"A\"]\n        \n        let suitArray : Array<string> = new Array<string>;\n        suitArray = [\"S\", \"H\", \"D\", \"C\"];\n\n        let index : number = 0;\n        for(let i = 0; i < rankArray.length; i++){\n            for(let j = 0; j < suitArray.length; j++){\n                this.scoreHashMap.set(rankArray[i] + suitArray[j], this.defaultScore); // All types have the same score\n                index++;\n            }\n        }\n    }\n\n    getScore(id_a : String, id_b : String){\n        if(id_a === id_b){\n            let val = this.scoreHashMap.get(id_a);\n            if(val === undefined){\n                return 0;\n            } \n            return val;\n        }\n        return 0; // If mismatch\n    }\n}\n\n"]}