{"version":3,"sources":["file:///Users/admin/Documents/GitHub/CMGameRepo/assets/Scripts/CardController.ts"],"names":["_decorator","Component","instantiate","Prefab","CCInteger","ccclass","property","CardController","type","tooltip","ScoreEval","CardSelectedQueue","NumSelectedCards","onLoad","i","NumCards","childCard","CardPrefab","node","addChild","cardScript","getComponent","init","widget","target","Array","on","event","card","propagationStopped","console","log","CardID","CardType","push","setFlipStatus","score","getScore","disable","shift","start","update","deltaTime","testGetChildren","children","forEach","childNode","name","FlippedUp"],"mappings":"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","sourcesContent":["import { _decorator, Component, instantiate, Node, Prefab, Widget } from 'cc';\nimport { CCInteger } from 'cc'\nimport { CardScript } from './CardScript';\nimport { ScoreEvaluator } from './ScoreEvaluator';\nimport { CardSelectEvent } from './CardSelectEvent';\nconst { ccclass, property } = _decorator;\n\n@ccclass('CardController')\nexport class CardController extends Component {\n    @property({type: Prefab, tooltip: \"Drag card prefab here\"})\n    CardPrefab : Prefab;\n\n    @property({type: CCInteger, tooltip: \"Number of cards\"})\n    NumCards : number;\n\n    ScoreEval : ScoreEvaluator\n\n    // Queue for tracking card selection events  --  for now use array, change to actual queue later\n    // Stores ID of selected cards temporally, remove the first two on match/mismatch\n    CardSelectedQueue : Array<CardScript>;\n\n    // Number of cards currently selected\n    NumSelectedCards : number;\n\n    protected onLoad(): void {\n        for (let i = 0; i < this.NumCards; i++){\n            const childCard = instantiate(this.CardPrefab);\n            this.node.addChild(childCard);\n            let cardScript : CardScript = \n                    childCard.getComponent(\"CardScript\") as CardScript;\n            \n            cardScript.init(false, \"Testing\", i); // todo change this to randomly spreading different matches\n            // For layout adjustments\n            let widget : Widget = \n                    childCard.getComponent(\"cc.Widget\") as Widget;\n            widget.target = this.node;\n        }\n\n        // Get the evaluator script\n        this.ScoreEval = this.node.getComponent(\"ScoreEvaluator\") as ScoreEvaluator;\n\n        this.CardSelectedQueue = new Array<CardScript>();\n        this.NumSelectedCards = 0;\n        // Setup listener for card selection events\n        this.node.on(\"card-selected\", (event : CardSelectEvent) => {\n            let card : CardScript = event.card;\n            // Stop event propagation\n            event.propagationStopped = true;  \n            console.log(\"Card selected: \", card.CardID, card.CardType);\n            // Handle animation logic here\n\n            // First add to queue\n            this.CardSelectedQueue.push(card);\n            this.NumSelectedCards++;\n            // If no other cards selected, can flip face up\n            if(this.NumSelectedCards == 1){\n                // Flip face up\n                card.setFlipStatus(true);\n            } else if (this.NumSelectedCards > 1){\n                // By this point, two cards are selected\n                card.setFlipStatus(true);\n                let score : number = this.ScoreEval.getScore(\n                    this.CardSelectedQueue[0].CardType,\n                    card.CardType\n                );\n                console.log(\"Score: \", score);\n                \n                if(score < 0){\n                    // Mismatch\n                    \n                    // Do delay, then flip both cards face down\n                    this.CardSelectedQueue[0].setFlipStatus(false);\n                    card.setFlipStatus(false);\n                    \n                } else {\n                    // Match\n\n                    // Do delay, then disable both cards from rendering\n                    this.CardSelectedQueue[0].disable();\n                    card.disable();\n                }\n                // Eject the first two queue entries which are the two selected cards\n                this.NumSelectedCards -= 2;\n                this.CardSelectedQueue.shift();\n                this.CardSelectedQueue.shift();\n\n            } else {\n                console.log(\"ERROR: Num selected cards: \", this.NumSelectedCards);\n            }\n        });\n    }\n    start() {\n        //this.testGetChildren();\n    }\n\n    update(deltaTime: number) {\n        // test score evaluator: should return 0, 100 and -1 sequentially\n        //console.log(this.ScoreEval.getScore(\"testing\", \"testing\"));\n        //console.log(this.ScoreEval.getScore(\"scored\", \"scored\"));\n        //console.log(this.ScoreEval.getScore(\"mismatch\", \"another_mismatch\"));\n    }\n\n    testGetChildren(){\n        this.node.children.forEach(childNode=> {\n            console.log(childNode.name);\n            let cardScript : CardScript = \n                        childNode.getComponent(\"CardScript\") as CardScript;\n            if(cardScript){\n                console.log(cardScript.CardType, cardScript.FlippedUp);\n            }\n            \n        });\n    }\n}\n\n"]}