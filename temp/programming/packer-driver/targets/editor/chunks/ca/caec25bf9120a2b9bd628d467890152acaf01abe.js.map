{"version":3,"sources":["file:///Users/admin/Documents/GitHub/CMGameRepo/assets/Scripts/CardController.ts"],"names":["shuffleArray","array","currentIndex","length","randomIndex","Math","floor","random","_decorator","Component","instantiate","Prefab","CCInteger","ccclass","property","CardController","type","tooltip","ScoreEval","CardSelectedQueue","NumSelectedCards","onLoad","start","node","getComponent","scoringTypes","Array","from","scoreHashMap","keys","console","log","numTypes","NumCards","shuffledTypes","i","push","childCard","CardPrefab","addChild","cardScript","init","widget","target","on","event","card","propagationStopped","CardID","CardType","FlippedUp","setFlipStatus","score","getScore","disable","shift","update","deltaTime","testGetChildren","children","forEach","childNode","name"],"mappings":"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","sourcesContent":["import { _decorator, Component, instantiate, Node, Prefab, Widget } from 'cc';\nimport { CCInteger } from 'cc'\nimport { CardScript } from './CardScript';\nimport { ScoreEvaluator } from './ScoreEvaluator';\nimport { CardSelectEvent } from './CardSelectEvent';\nconst { ccclass, property } = _decorator;\n\n@ccclass('CardController')\nexport class CardController extends Component {\n    @property({type: Prefab, tooltip: \"Drag card prefab here\"})\n    CardPrefab : Prefab;\n\n    @property({type: CCInteger, tooltip: \"Number of cards\"})\n    NumCards : number;\n\n    ScoreEval : ScoreEvaluator\n\n    // Queue for tracking card selection events  --  for now use array, change to actual queue later\n    // Stores ID of selected cards temporally, remove the first two on match/mismatch\n    CardSelectedQueue : Array<CardScript>;\n\n    // Number of cards currently selected\n    NumSelectedCards : number;\n\n    // Assuming that number of cards is even, there must be NumCards/2 unique pairs\n    // However, can have repeated pairs if run out of card types\n    // For now, use 5 card types \n\n    protected onLoad(): void {\n        \n    }\n    start() {\n        //this.testGetChildren();\n        // Get the evaluator script\n        this.ScoreEval = this.node.getComponent(\"ScoreEvaluator\") as ScoreEvaluator;\n\n        // From the score evaluator, get the list of scoring card types\n        let scoringTypes : Array<String> = Array.from(this.ScoreEval.scoreHashMap.keys());\n        scoringTypes = shuffleArray(scoringTypes);\n        console.log(scoringTypes);\n        let numTypes : number = this.NumCards / 2;\n        let shuffledTypes : Array<String> = new Array<String>();\n        // Get the first numTypes shuffled types from the evaluator, and only use those for this game\n        console.log(shuffledTypes);\n        for(let i = 0; i < numTypes; i++){\n            // Push twice since we need pairs\n            shuffledTypes.push(scoringTypes[i]);\n            shuffledTypes.push(scoringTypes[i]);\n            console.log(shuffledTypes);\n        }\n        //console.log(shuffledTypes);\n        shuffledTypes = shuffleArray(shuffledTypes);\n        //console.log(shuffledTypes);\n        \n\n        for (let i = 0; i < this.NumCards; i++){\n            const childCard = instantiate(this.CardPrefab);\n            this.node.addChild(childCard);\n            let cardScript : CardScript = \n                    childCard.getComponent(\"CardScript\") as CardScript;\n            \n            cardScript.init(false, shuffledTypes[i], i); // todo change this to randomly spreading different matches\n            // For layout adjustments\n            let widget : Widget = \n                    childCard.getComponent(\"cc.Widget\") as Widget;\n            widget.target = this.node;\n        }\n\n        \n\n        this.CardSelectedQueue = new Array<CardScript>();\n        this.NumSelectedCards = 0;\n        // Setup listener for card selection events\n        this.node.on(\"card-selected\", (event : CardSelectEvent) => {\n            let card : CardScript = event.card;\n            // Stop event propagation\n            event.propagationStopped = true;  \n            console.log(\"SELECTED CARD ID: \", card.CardID, \" CARD TYPE: \",card.CardType);\n            // Handle animation logic here\n\n            // Check if this card is already face up. If it is then early return\n            if(card.FlippedUp){\n                return;\n            }\n            // First add to queue\n            this.CardSelectedQueue.push(card);\n            this.NumSelectedCards++;\n            // If no other cards selected, can flip face up\n            if(this.NumSelectedCards == 1){\n                // Flip face up\n                card.setFlipStatus(true);\n            } else if (this.NumSelectedCards > 1){\n                // By this point, two cards are selected\n                card.setFlipStatus(true);\n                let score : number = this.ScoreEval.getScore(\n                    this.CardSelectedQueue[0].CardType,\n                    card.CardType\n                );\n                console.log(\"Score: \", score);\n                \n                if(score < 0){\n                    // Mismatch\n                    \n                    // Do delay, then flip both cards face down\n                    this.CardSelectedQueue[0].setFlipStatus(false);\n                    card.setFlipStatus(false);\n                    \n                } else {\n                    // Match\n\n                    // Do delay, then disable both cards from rendering\n                    this.CardSelectedQueue[0].disable();\n                    card.disable();\n                }\n                // Eject the first two queue entries which are the two selected cards\n                this.NumSelectedCards -= 2;\n                this.CardSelectedQueue.shift();\n                this.CardSelectedQueue.shift();\n\n            } else {\n                console.log(\"ERROR: Num selected cards: \", this.NumSelectedCards);\n            }\n        });\n    }\n\n    update(deltaTime: number) {\n        // test score evaluator: should return 0, 100 and -1 sequentially\n        //console.log(this.ScoreEval.getScore(\"testing\", \"testing\"));\n        //console.log(this.ScoreEval.getScore(\"scored\", \"scored\"));\n        //console.log(this.ScoreEval.getScore(\"mismatch\", \"another_mismatch\"));\n    }\n\n    testGetChildren(){\n        this.node.children.forEach(childNode=> {\n            console.log(childNode.name);\n            let cardScript : CardScript = \n                        childNode.getComponent(\"CardScript\") as CardScript;\n            if(cardScript){\n                console.log(cardScript.CardType, cardScript.FlippedUp);\n            }\n            \n        });\n    }\n}\n\n// Using the Fisher-Yates shuffle\nfunction shuffleArray<T>(array: T[]): T[] {\n    let currentIndex = array.length, randomIndex;\n  \n    // While there remain elements to shuffle.\n    while (currentIndex !== 0) {\n  \n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }\n"]}