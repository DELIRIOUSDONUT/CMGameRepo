{"version":3,"sources":["file:///Users/admin/Documents/GitHub/CMGameRepo/assets/Scripts/CardController.ts"],"names":["shuffleArray","array","currentIndex","length","randomIndex","Math","floor","random","_decorator","Component","instantiate","Prefab","CCInteger","ccclass","property","CardController","type","tooltip","ScoreEval","CardSelectedQueue","NumSelectedCards","ScoreCounter","onLoad","start","NumCards","node","getComponent","shuffledTypes","getCardTypes","i","childCard","CardPrefab","addChild","cardScript","init","widget","target","setupCardMatchListener","update","deltaTime","testGetChildren","children","forEach","childNode","console","log","name","CardType","FlippedUp","Array","on","event","card","propagationStopped","CardID","push","setFlipStatus","score","getScore","trackScore","disable","shift","scoringTypes","from","scoreHashMap","keys","numTypes"],"mappings":"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","sourcesContent":["import { _decorator, Component, instantiate, Node, Prefab, Widget } from 'cc';\nimport { CCInteger } from 'cc'\nimport { CardScript } from './CardScript';\nimport { ScoreEvaluator } from './ScoreEvaluator';\nimport { CardSelectEvent } from './CardSelectEvent';\nimport { ScoreCounter } from './ScoreCounter';\nconst { ccclass, property } = _decorator;\n\n@ccclass('CardController')\nexport class CardController extends Component {\n    @property({type: Prefab, tooltip: \"Drag card prefab here\"})\n    CardPrefab : Prefab;\n\n    @property({type: CCInteger, tooltip: \"Number of cards\"})\n    NumCards : number;\n\n    ScoreEval : ScoreEvaluator;\n\n    // Queue for tracking card selection events  --  for now use array, change to actual queue later\n    // Stores ID of selected cards temporally, remove the first two on match/mismatch\n    CardSelectedQueue : Array<CardScript>;\n\n    // Number of cards currently selected\n    NumSelectedCards : number;\n\n    // Assuming that number of cards is even, there must be NumCards/2 unique pairs\n    // However, can have repeated pairs if run out of card types\n    // For now, use 5 card types \n\n    // Object to keep track of player score\n    ScoreCounter : ScoreCounter;\n\n    protected onLoad(): void {\n        \n    }\n    start() {\n        // First make sure that numcards is an even number (cant make pairs with odd num)\n        if(this.NumCards % 2 != 0){\n            this.NumCards -= 1;\n        }\n        // Get the evaluator script\n        this.ScoreEval = this.node.getComponent(\"ScoreEvaluator\") as ScoreEvaluator;\n\n        // Get a random subset of card type pairs\n        let shuffledTypes : Array<String> = this.getCardTypes();\n\n        // Instantiate all cards\n        for (let i = 0; i < this.NumCards; i++){\n            const childCard = instantiate(this.CardPrefab);\n            this.node.addChild(childCard);\n            let cardScript : CardScript = \n                    childCard.getComponent(\"CardScript\") as CardScript;\n            \n            cardScript.init(false, shuffledTypes[i], i); // todo change this to randomly spreading different matches\n            // For layout adjustments\n            let widget : Widget = \n                    childCard.getComponent(\"cc.Widget\") as Widget;\n            widget.target = this.node;\n        }\n\n        // Setup listener for card selection events\n        this.setupCardMatchListener();\n\n        // Get score tracker\n        this.ScoreCounter = this.node.getComponent(\"ScoreCounter\") as ScoreCounter;\n    }\n\n    update(deltaTime: number) {\n    }\n\n    testGetChildren(){\n        this.node.children.forEach(childNode=> {\n            console.log(childNode.name);\n            let cardScript : CardScript = \n                        childNode.getComponent(\"CardScript\") as CardScript;\n            if(cardScript){\n                console.log(cardScript.CardType, cardScript.FlippedUp);\n            }\n            \n        });\n    }\n\n    setupCardMatchListener(){\n        this.CardSelectedQueue = new Array<CardScript>();\n        this.NumSelectedCards = 0;\n        this.node.on(\"card-selected\", (event : CardSelectEvent) => {\n            let card : CardScript = event.card;\n            // Stop event propagation\n            event.propagationStopped = true;  \n            console.log(\"SELECTED CARD ID: \", card.CardID, \" CARD TYPE: \",card.CardType);\n            // Handle animation logic here\n    \n            // Check if this card is already face up. If it is then early return\n            if(card.FlippedUp){\n                return;\n            }\n            // First add to queue\n            this.CardSelectedQueue.push(card);\n            this.NumSelectedCards++;\n            // If no other cards selected, can flip face up\n            if(this.NumSelectedCards == 1){\n                // Flip face up\n                card.setFlipStatus(true);\n            } else if (this.NumSelectedCards > 1){\n                // By this point, two cards are selected\n                card.setFlipStatus(true);\n                let score : number = this.ScoreEval.getScore(\n                    this.CardSelectedQueue[0].CardType,\n                    card.CardType\n                );\n                console.log(\"Score: \", score);\n                \n                // Pass score to score counter\n                this.ScoreCounter.trackScore(score);\n\n                if(score <= 0){\n                    // Mismatch\n                    \n                    // Do delay, then flip both cards face down\n                    this.CardSelectedQueue[0].setFlipStatus(false);\n                    card.setFlipStatus(false);\n                    \n                } else {\n                    // Match\n    \n                    // Do delay, then disable both cards from rendering\n                    this.CardSelectedQueue[0].disable();\n                    card.disable();\n                }\n                // Eject the first two queue entries which are the two selected cards\n                this.NumSelectedCards -= 2;\n                this.CardSelectedQueue.shift();\n                this.CardSelectedQueue.shift();\n    \n            } else {\n                console.log(\"ERROR: Num selected cards: \", this.NumSelectedCards);\n            }\n        });\n    }\n\n    getCardTypes() : Array<String>{\n        // From the score evaluator, get the list of scoring card types\n        let scoringTypes : Array<String> = Array.from(this.ScoreEval.scoreHashMap.keys());\n        scoringTypes = shuffleArray(scoringTypes);\n        console.log(scoringTypes);\n        let numTypes : number = this.NumCards / 2;\n        let shuffledTypes : Array<String> = new Array<String>();\n        // Get the first numTypes shuffled types from the evaluator, and only use those for this game\n        console.log(shuffledTypes);\n        for(let i = 0; i < numTypes; i++){\n            // Push twice since we need pairs\n            shuffledTypes.push(scoringTypes[i]);\n            shuffledTypes.push(scoringTypes[i]);\n            console.log(shuffledTypes);\n        }\n        //console.log(shuffledTypes);\n        shuffledTypes = shuffleArray(shuffledTypes);\n        return shuffledTypes;\n    }\n}\n\n// Using the Fisher-Yates shuffle to shuffle an array\nfunction shuffleArray<T>(array: T[]): T[] {\n    let currentIndex = array.length, randomIndex;\n  \n    // While there remain elements to shuffle.\n    while (currentIndex !== 0) {\n  \n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }\n"]}