{"version":3,"sources":["file:///Users/admin/Documents/GitHub/CMGameRepo/assets/Scripts/ScoreCounter.ts"],"names":["_decorator","CCInteger","Component","ScoreUpdateEvent","ccclass","property","ScoreCounter","type","tooltip","ComboStreak","Score","ComboMisses","start","update","deltaTime","trackScore","score","ComboStreakTolerance","ScoreComboGrowth","node","dispatchEvent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAqBC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,S,OAAAA,S;;AAChCC,MAAAA,gB,iBAAAA,gB;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;8BAGjBM,Y,WADZF,OAAO,CAAC,cAAD,C,UAEHC,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAGN,SAAR;AAAmBO,QAAAA,OAAO,EAAG;AAA7B,OAAD,C,UAGRH,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAGN,SAAR;AAAmBO,QAAAA,OAAO,EAAG;AAA7B,OAAD,C,2BALb,MACaF,YADb,SACkCJ,SADlC,CAC4C;AAAA;AAAA;;AAAA;;AAAA;;AAOxC;AAPwC,eAQxCO,WARwC,GAQjB,CARiB;AAUxC;AAVwC,eAWxCC,KAXwC,GAWvB,CAXuB;AAaxC;AAbwC,eAcxCC,WAdwC,GAcjB,CAdiB;AAAA;;AAexCC,QAAAA,KAAK,GAAG,CAEP;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AAEDC,QAAAA,UAAU,CAACC,KAAD,EAAgB;AACtB;AACA,cAAGA,KAAK,IAAI,CAAZ,EAAc;AACV,iBAAKL,WAAL,IAAoB,CAApB;;AACA,gBAAI,KAAKA,WAAL,GAAmB,KAAKM,oBAA5B,EAAiD;AAC7C,mBAAKR,WAAL,GAAmB,CAAnB;AACA,mBAAKE,WAAL,GAAmB,CAAnB;AACH;AACJ,WAND,MAMO;AACH;AACA,iBAAKA,WAAL,GAAmB,CAAnB;AACA,iBAAKF,WAAL,IAAoB,CAApB;AACA,iBAAKC,KAAL,IAAcM,KAAK,GAAG,KAAKE,gBAAL,GAAwB,KAAKT,WAAnD;AACH,WAbqB,CAetB;;;AACA,eAAKU,IAAL,CAAUC,aAAV,CAAwB;AAAA;AAAA,oDAAqB,KAAKV,KAA1B,EAAiC,KAAKD,WAAtC,CAAxB;AACH;;AAxCuC,O;;;;;iBAEZ,C;;;;;;;iBAGI,C","sourcesContent":["import { _decorator, CCFloat, CCInteger, Component, Node } from 'cc';\nimport { ScoreUpdateEvent } from './ScoreUpdateEvent';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ScoreCounter')\nexport class ScoreCounter extends Component {\n    @property({type : CCInteger, tooltip : \"How much the combo score increases per combo streak\"})\n    ScoreComboGrowth : number = 5;\n\n    @property({type : CCInteger, tooltip : \"How much the player is allowed to not match while maintaining the combo\"})\n    ComboStreakTolerance : number = 1;\n\n    // Current combo streak\n    ComboStreak : number = 0;\n\n    // Current score\n    Score : number = 0;\n\n    // Current combo misses\n    ComboMisses : number = 0;\n    start() {\n\n    }\n\n    update(deltaTime: number) {\n        \n    }\n\n    trackScore(score : number){\n        // Check if combo streak is broken\n        if(score <= 0){\n            this.ComboMisses += 1;\n            if (this.ComboMisses > this.ComboStreakTolerance){\n                this.ComboStreak = 0;\n                this.ComboMisses = 0;\n            }\n        } else {\n            // Player scored, so update score and combo\n            this.ComboMisses = 0;\n            this.ComboStreak += 1;\n            this.Score += score + this.ScoreComboGrowth * this.ComboStreak;\n        }\n\n        // Emit signal to update UI for score and combo\n        this.node.dispatchEvent(new ScoreUpdateEvent(this.Score, this.ComboStreak));\n    }\n}\n\n"]}